# -*- coding: utf-8 -*-

"""
Module implementing Exploitation_enregistreurs.
"""

from PyQt4.QtCore import pyqtSlot
import pythoncom
from PyQt4 import QtGui
from PyQt4.QtGui import QMainWindow
from Modules.Synchronisation.GestionsFichiersEnregistreurs import FichierEnregistreur

from Modules.Synchronisation.GUI.Ui_Exploitation_enregistreurs import Ui_MainWindow
from PyQt4.QtGui import QFileDialog
from PyQt4.QtGui import QAction
from Modules.Synchronisation.Package.AccesBdd import AccesBdd
#from GUI.Affichage_graphique import Graphique
import os

from datetime import datetime
from datetime import timedelta

import win32com.client

from PyQt4.QtGui import QMessageBox
import pickle
import numpy as np
import matplotlib.pyplot as plt

import matplotlib.dates as pltdates
from PyQt4.QtCore import SIGNAL
from Modules.Synchronisation.GUI.Gestion_centrales import Dialog




class Exploitation_enregistreurs(QMainWindow, Ui_MainWindow):
    """
    Class documentation goes here.
    """
    def __init__(self, login, password, parent=None):
        """
        Constructor
        
        @param parent reference to the parent widget (QWidget)
        """
        super(Exploitation_enregistreurs, self).__init__(parent)
        self.setupUi(self)
        
        #chemin general
        self.path = 'y:/1.METROLOGIE/0.ARCHIVES ETALONNAGE-VERIFICATIONS/1-TEMPERATURE/'
        
        
        #BDD
        self.db = AccesBdd(login, password)
#        self.login = login
#        self.password = password
        
        self.parc = self.db.instruments()
        
        self.actionOuvrir.setEnabled(False)
        self.chemin_fichier_etalon = ""
        
        self.comboBox_enregistreur.addItems(["*","fichier_logtag","fichier_waranet_puce",
                                            "fichier_ebro","fichier_progesplus",
                                            "fichier_datalog","fichier_fd5","fichier_pc10",  
                                            "fichier_sa32","fichier_tag_ela"])
        self.nb_mesure_etalon = 0
        self.progressBar.setValue(0)
        
        
        #combobox operateur
        list_technicien = [x[0] for x in self.db.gestion_combobox_onglet_operateur()]
        self.comboBox_operateur.addItem("*")
        self.comboBox_operateur.addItems(list_technicien)
#        print(list_technicien)
        
        list_generateurs = self.db.list_generateur()
        self.comboBox_generateur.addItems(list_generateurs)
        self.comboBox_generateur.addItem("*")
#        print("{}".format(self.comboBox_generateur.count()))
        self.comboBox_generateur.setCurrentIndex((self.comboBox_generateur.count() - 1))
        
        list_etalons = self.db.list_etalon()
        self.comboBox_etalon.addItems(list_etalons)
        self.comboBox_etalon.addItem("*")
        self.comboBox_etalon.setCurrentIndex((self.comboBox_etalon.count() - 1))
        
        #ctes de classe
        self.fichiers_etalons = []
        self.type_enregistreur = []
        self.item = ""
        self.value_enregistreur = []
        self.nbr_enregistreur = 0
        self.list_ident_enregistreur = []
        self.dictionnaire_ident_sondes_centrales = {}
        
        
        #rapport excel
        self.xl = win32com.client.DispatchEx('Excel.Application')
        self.classeur = self.xl.Workbooks.Add()
        
        
        
    
   

    
    @pyqtSlot()
    def on_pushButton_synchro_clicked(self):
        """
        Slot documentation goes here.
        """
        nbr_ligne_tableau = self.tableWidget.rowCount()
        nbr_colonne_tableau = self.tableWidget.columnCount()
        nbr_enregistreur = (nbr_colonne_tableau-2)/2
        
        
#        print("nbr mesure {}".format(self.nb_mesure_etalon))
        
        #gestion donnees de l'etalon:
        etalon_preminute = ()
        etalon_postminute = ()
        
        for element_etalon in range(self.nb_mesure_etalon):
            t1 = datetime.strptime(self.tableWidget.item(element_etalon, 0).text(), "%Y-%m-%d %H:%M:%S")
            mesure = self.tableWidget.item(element_etalon, 1).text()
            
            if (t1.second >= 50 and t1.second <= 59) :
                etalon_preminute =(t1, mesure)
                break
        for element_etalon in range(self.nb_mesure_etalon):
            t1 = datetime.strptime(self.tableWidget.item(element_etalon, 0).text(), "%Y-%m-%d %H:%M:%S")
            mesure = self.tableWidget.item(element_etalon, 1).text()
        
            if (t1.second <=9 and t1.second >= 0) :
                etalon_postminute = (t1, mesure)
                break
                
#        print("etalon pre {}".format(etalon_preminute))
#        print("etalon post {}".format(etalon_postminute))
        
        if len(etalon_preminute) == 0 and len(etalon_postminute) != 0:
            depart_pre_minute = etalon_postminute
            depart_post_minute = etalon_postminute
        
        elif len(etalon_preminute) != 0 and len(etalon_postminute) == 0:
            depart_pre_minute = etalon_preminute
            depart_post_minute = etalon_preminute
            
        else:
            depart_pre_minute = etalon_preminute
            depart_post_minute = etalon_postminute
            
        
        
        etalon_preminute_bis = []
        etalon_postminute_bis = []
        
        etalon_preminute_bis.append(depart_pre_minute)
        etalon_postminute_bis.append(depart_post_minute)
        
        for nbr_minute in range(1, 11):
#            print(depart_pre_minute)
            t0_pre = depart_pre_minute[0] #time
            t0_post = depart_post_minute[0]
            for element_etalon in range(self.nb_mesure_etalon):
                t1 = datetime.strptime(self.tableWidget.item(element_etalon , 0).text(), "%Y-%m-%d %H:%M:%S")                
                mesure = self.tableWidget.item(element_etalon, 1).text() 
                
                delta_pre = t1-t0_pre
                delta_post = t1 -t0_post

                if delta_pre >= timedelta(minutes = nbr_minute ) and delta_pre <= timedelta(minutes = nbr_minute, seconds = 5 ):
                    etalon_preminute_bis.append((t1, mesure))
        
                if delta_post >= timedelta(minutes = nbr_minute ) and delta_post <= timedelta(minutes = nbr_minute, seconds = 5 ):
                    etalon_postminute_bis.append((t1, mesure))
        


            #modification des donnees de l'etalon avec tri (10 mesure et 1/min)
            
        if len(etalon_preminute_bis)>10:
            etalon_preminute_10_mes = etalon_preminute_bis[0:10]
        else:
            etalon_preminute_10_mes = etalon_preminute_bis
        if len(etalon_postminute_bis)>10:
            etalon_postminute_10_mes = etalon_postminute_bis[0:10]
        else:
            etalon_postminute_10_mes = etalon_postminute_bis
            
            #selection entre pret et post minute:
            

        
        self.progressBar.setMaximum(len(etalon_preminute_10_mes))
        self.progressBar.setMinimum(0)
        self.progressBar.setValue(0)
        
        etalon = []
        enregistreurs = {}
        for ele in range(1, int(nbr_enregistreur + 1)):
            enregistreurs[ele]=[]
            
        for i in range(len(etalon_preminute_10_mes)):#self.nb_mesure_etalon):
            t1 = etalon_preminute_10_mes[i][0]#datetime.strptime(, "%Y-%m-%d %H:%M:%S")#self.tableWidget.item(i, 0).text(), "%Y-%m-%d %H:%M:%S")
            self.progressBar.setValue(i+1)
            
            for k in range(2, nbr_colonne_tableau, 2):
                
                for j in range(nbr_ligne_tableau):
                    if self.tableWidget.item(j, k) != None:
                        list_date = []
                        t2 = datetime.strptime(self.tableWidget.item(j, k).text(), "%Y-%m-%d %H:%M:%S")
                        list_date.append(t1)
                        list_date.append(t2)
                        delta = max(list_date) -min (list_date)

                        if delta <= timedelta(seconds = 10) :#and min(list_date)== t1 :
                            etalon.append((t1,etalon_preminute_10_mes[i][1]))#self.tableWidget.item(i, 1).text()))                
                            enregistreurs[(k/2)].append((t2,self.tableWidget.item(j, k+1).text()))

        etalon_trie = list(set(etalon))
        etalon_trie.sort()

        #verification si synchro par rapport Ã  la preminute c ok ou s'il faut passer a post minute
        test_synchronisation = True
        for j in range(0, int(nbr_enregistreur)):
            if len(enregistreurs[j+1])<10:
                test_synchronisation = False
#        print(test_synchronisation)
        if test_synchronisation == False:
            etalon = []
            enregistreurs = {}
            
            for ele in range(1, int(nbr_enregistreur + 1)):
                enregistreurs[ele]=[]
                
            for i in range(len(etalon_postminute_10_mes)):#self.nb_mesure_etalon):
                t1 = etalon_postminute_10_mes[i][0]#datetime.strptime(, "%Y-%m-%d %H:%M:%S")#self.tableWidget.item(i, 0).text(), "%Y-%m-%d %H:%M:%S")
                self.progressBar.setValue(i+1)
                
                for k in range(2, nbr_colonne_tableau, 2):
                    
                    for j in range(nbr_ligne_tableau):
                        if self.tableWidget.item(j, k) != None:
                            list_date = []
                            t2 = datetime.strptime(self.tableWidget.item(j, k).text(), "%Y-%m-%d %H:%M:%S")
                            list_date.append(t1)
                            list_date.append(t2)
                            delta = max(list_date) -min (list_date)

                            if delta <= timedelta(seconds = 10) :#and min(list_date)== t1 :
                                etalon.append((t1,etalon_postminute_10_mes[i][1]))#self.tableWidget.item(i, 1).text()))                
                                enregistreurs[(k/2)].append((t2,self.tableWidget.item(j, k+1).text()))
        

        etalon_trie = list(set(etalon))
        etalon_trie.sort()
        
        #effacement tableau et rÃ©affectation des donnees
        for i in range(nbr_ligne_tableau+1):
            self.tableWidget.removeRow(nbr_ligne_tableau-i)
        for i in range(len(etalon_trie)):
            self.tableWidget.insertRow(i)
            self.tableWidget.setItem(i, 0, QtGui.QTableWidgetItem(str(etalon_trie[i][0])))
            self.tableWidget.setItem(i, 1, QtGui.QTableWidgetItem(str(etalon_trie[i][1])))
        
        for j in range(0, int(nbr_enregistreur)):

            for w in range(len(enregistreurs[j+1])):
                self.tableWidget.setItem(w, (j*2 + 2), QtGui.QTableWidgetItem(str(enregistreurs[j+1][w][0])))
                self.tableWidget.setItem(w, (j*2 + 3), QtGui.QTableWidgetItem(str(enregistreurs[j+1][w][1])))
                
                
        self.progressBar.setValue(0)
        self.nb_mesure_etalon = self.tableWidget.rowCount()
        
    @pyqtSlot()
    def on_pushButton_export_excel_clicked(self):
        """
        Slot documentation goes here.
        """
        try:
            self.xl.Visible = True 
        
            self.gestion_excel(self.classeur)
        except pythoncom.com_error:
            
            self.classeur = self.xl.Workbooks.Add()
            self.gestion_excel(self.classeur)

    
    def gestion_excel(self, classeur):
        #lecture tableau
        nbr_ligne = self.tableWidget.rowCount()
        nbr_colonne = self.tableWidget.columnCount()
        
        valeur_tableau = []
        list_nom_colonne = []

        for colonne in range(nbr_colonne):
            donnees = []
            list_nom_colonne.append(self.tableWidget.horizontalHeaderItem(colonne).text())

            for ligne in range(nbr_ligne):
                if self.tableWidget.item(ligne,colonne) != None:
                    donnees.append(self.tableWidget.item(ligne,colonne ).text())
            valeur_tableau.append(donnees)
            

            
        #gestion excel
        #cte de classe
        nbr_pt_etal = self.spinBox_nbr_pt.value()
        num_onglet = self.spinBox_pt_etal.value()
        
        if classeur.Sheets.Count < nbr_pt_etal:
            for i in range((nbr_pt_etal - classeur.Sheets.Count)):
                self.classeur.Sheets.Add()
        
        onglet = classeur.Worksheets(num_onglet)     
        nom_onglet = "Pt_n" +" "+str(num_onglet) 
        onglet.Name = nom_onglet
        
        
        onglet.Cells.ClearContents()
#        Selection.ClearContents
        
           
        i = 0
        for nom_colonne in list_nom_colonne:
#            try: 
            list_pour_moyenne = []
            onglet.Cells(1,(i+1)).Value = nom_colonne
            
            
            j=0
            for donnees in valeur_tableau[i]:
                
                onglet.Cells((j+2),(i+1)).Value = str(donnees)                
                
                if nom_colonne == "Horodatage" or nom_colonne == "Date_Heure":
                    onglet.Cells((j+2),(i+1)).NumberFormat = "jj/mm/aaaa hh:mm:ss"
                    
                else:
                    try:
                        list_pour_moyenne.append(float(donnees))
                    except ValueError:
                        list_pour_moyenne.append(donnees)
#                        continue
                j+=1
                
            if i == 0:
                onglet.Cells((j+4),(i+1)).Value = "Moyenne"
                onglet.Cells((j+4),(i+1)).Font.Bold = True
                
            if len(list_pour_moyenne)!=0:
                try:
                    moyenne = np.mean(list_pour_moyenne)
                except:
                    moyenne = "Na"
                onglet.Cells((j+4),(i+1)).Value = str(moyenne)
                onglet.Cells((j+4),(i+1)).Font.Bold = True
            
            i+=1

        onglet.Select()
        
    
    @pyqtSlot(QAction)
    def on_menuNettoyer_triggered(self, action):
        """
        Slot documentation goes here.
        """
        for i in range(self.tableWidget.rowCount()):
                self.tableWidget.removeRow(self.tableWidget.rowCount()-i)
    
    
    @pyqtSlot()
    def on_actionTotal_triggered(self):
        """
        Slot documentation goes here.
        """
        nbr_ligne = self.tableWidget.rowCount()
        nbr_colonne =self.tableWidget.columnCount()
        
        list_nom_colonne = []
        for colonne in range(nbr_colonne):
            list_nom_colonne.append(self.tableWidget.horizontalHeaderItem(colonne).text())

        
        fig = plt.figure()
#        fig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')
#        plt.xticks(rotation= 30)
        ax1 = fig.add_subplot(2, 1, 1)
        
        ax2 = fig.add_subplot(2, 1, 2)
#        fig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')
        
        fig.canvas.set_window_title('Courbes de l''ensemble')
        
        
        for colonne in range(0, nbr_colonne, 2):
            n_colonne_donnees = colonne +1
            horodatage = []
            donnees = []
            for ligne in range(nbr_ligne):
                if self.tableWidget.item(ligne,colonne) != None:
                    try:
                        ele = datetime.strptime(self.tableWidget.item(ligne,colonne).text(), "%Y-%m-%d %H:%M:%S")
                        horodatage.append(ele)                    
                        donnees.append(float(self.tableWidget.item(ligne,n_colonne_donnees ).text()))
                    except ValueError:
                        horodatage.pop()
                        continue
            
            if colonne == 0:
#                fig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')
                ax1.plot_date(horodatage, donnees, '-',label = list_nom_colonne[n_colonne_donnees], color='r' ,   linewidth=2 )
                ax1.legend()
#                locator = pltdates.MinuteLocator(interval=2)
#                ax1.xaxis.set_major_locator(locator)
        
                formatter = pltdates.DateFormatter("%H:%M:%S")
                ax1.xaxis.set_major_formatter(formatter)
                
                ax1.autoscale_view()
#                fig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')
                
                
            else:
#                fig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')
                ax2.plot_date(horodatage, donnees, '-',label = list_nom_colonne[n_colonne_donnees],   linewidth=1 )
                ax2.legend()
#                locator = pltdates.MinuteLocator(interval=2)
#                ax2.xaxis.set_major_locator(locator)
        
                formatter = pltdates.DateFormatter("%H:%M:%S")
                ax2.xaxis.set_major_formatter(formatter)
                ax2.autoscale_view()

        
#                plt.xticks(rotation= 30)
        plt.show()
    
    
    @pyqtSlot()
    def on_actionEtalon_triggered(self):
        """
        Slot documentation goes here.
        """
        nbr_ligne = self.tableWidget.rowCount()
        nbr_colonne =self.tableWidget.columnCount()
        
        list_nom_colonne = []
        for colonne in range(nbr_colonne):
            list_nom_colonne.append(self.tableWidget.horizontalHeaderItem(colonne).text())

        
#        fig = plt.figure()
        fig, ax = plt.subplots()
        
        fig.canvas.set_window_title("Courbe de l'Ã©talon")
        
        
        

        horodatage = []
        donnees = []
        for ligne in range(nbr_ligne):
            if self.tableWidget.item(ligne,0) != None:
                ele = datetime.strptime(self.tableWidget.item(ligne,0).text(), "%Y-%m-%d %H:%M:%S")
                horodatage.append(ele)

                donnees.append(float(self.tableWidget.item(ligne,(1) ).text()))
        
        
        ax.plot_date(horodatage, donnees, '-',label = self.tableWidget.horizontalHeaderItem(1).text(), color='r' ,   linewidth=2 )
        ax.legend()
        
        locator = pltdates.MinuteLocator(interval=2)
        ax.xaxis.set_major_locator(locator)
        
        
        formatter =pltdates.DateFormatter("%H:%M:%S")
        ax.xaxis.set_major_formatter(formatter)



        plt.show()
     

    
    @pyqtSlot()
    def on_pushButton_Fichiers_etalons_clicked(self):
        """
        Slot documentation goes here.
        """
        #nettoyage
        self.fichiers_etalons = []
        self.lineEdit_nbr_pt.clear()
        self.value_enregistreur = []
        self.spinBox_pt_etal.setValue(1)
        
        nbr_ligne = self.tableWidget_config.rowCount()
        for ligne in reversed(range(nbr_ligne)):
             self.tableWidget_config.removeRow(ligne)
        
        nbr_ligne_tableau_enregistreur = self.tableWidget_config_2.rowCount()
        for ligne in reversed(range(nbr_ligne_tableau_enregistreur)):
             self.tableWidget_config_2.removeRow(ligne)
        
        nbr_ligne_tableau_synchro = self.tableWidget.rowCount()
        nbr_colonne_tableau_synchro = self.tableWidget.columnCount()
        for ligne in reversed(range(nbr_ligne_tableau_synchro)):
             self.tableWidget.removeRow(ligne)
        for colonne in reversed(range(nbr_colonne_tableau_synchro)):
             self.tableWidget.removeColumn(colonne)
        
        
        #selection fichiers
        fichiers = QFileDialog.getOpenFileNames(self, "Ouvrir un/des fichier(s) Ã©talon", self.path, "Etalon(*.txt)")

        if len(fichiers) != 0:
            path =  os.path.dirname(os.path.abspath(fichiers[0]))        
            self.path = path        
            
            #gestion des affichage:
            self.lineEdit_nbr_pt.setText(str(len(fichiers)))            
            self.spinBox_pt_etal.setMaximum(len(fichiers))
            self.spinBox_nbr_pt.setValue(len(fichiers))
            
            #traitement fichiers
            list_fichiers_etalon_traites = []
            for fichier_etalon in fichiers:
                
                fichier_etalon_traite = FichierEnregistreur(fichier_etalon, self.db)           
                valeurs = fichier_etalon_traite.traitement_fichier_etalon()
                valeurs["chemin"] = fichier_etalon
    
                self.nb_mesure_etalon = len(valeurs[1])
#                self.spinBox_nbr_mesure_etalon.setValue(self.nb_mesure_etalon)
                
                list_fichiers_etalon_traites.append(valeurs)
            
            
            #tri des fichiers etalons dans l'ordre chronologique:
            
            premier_horodatage = [t0[1][0] for t0 in list_fichiers_etalon_traites ]
            premier_horodatage.sort()
   
            
            for date in premier_horodatage:
                for etal in list_fichiers_etalon_traites:
                    if etal[1][0] == date:
                        self.fichiers_etalons.append(etal)
                        
#            print(self.fichiers_etalons)
     
            self.date_etalonnage = self.fichiers_etalons[0][1][0]
#            print(self.date_etalonnage)  
                
                
                   
            for fichier in reversed(self.fichiers_etalons):
#                print(fichier)            
                self.tableWidget_config.insertRow(0)
                self.tableWidget_config.setItem(0, 0, QtGui.QTableWidgetItem(str(fichier["chemin"])))
                self.tableWidget_config.setItem(0, 1, QtGui.QTableWidgetItem(str(fichier["pt_consigne"])))
                self.tableWidget_config.setItem(0, 2, QtGui.QTableWidgetItem(str(fichier["generateur"])))
                self.tableWidget_config.setItem(0, 3, QtGui.QTableWidgetItem(str(fichier["etalon"])))
                self.tableWidget_config.setItem(0, 4, QtGui.QTableWidgetItem(str(len(fichier[2]))))
                

        
    
    @pyqtSlot()
    def on_pushButton_enregistreur_clicked(self):
        """
        Slot documentation goes here.
        """
        if self.comboBox_enregistreur.currentText() !="*": 
            
            #nettoyages des tableaux:
            nbr_ligne = self.tableWidget_config_2.rowCount()
            for ligne in reversed(range(nbr_ligne)):
                self.tableWidget_config_2.removeRow(ligne)
                
            nbr_ligne_tableau_synchro = self.tableWidget.rowCount()
            nbr_colonne_tableau_synchro = self.tableWidget.columnCount()
            for ligne in reversed(range(nbr_ligne_tableau_synchro)):
                self.tableWidget.removeRow(ligne)
            for colonne in reversed(range(nbr_colonne_tableau_synchro)):
                self.tableWidget.removeColumn(colonne)
                
            self.nbr_enregistreur == 0
                
                
            fichiers = QFileDialog.getOpenFileNames(self, "Ouvrir un/des fichier(s) enregistreur(s)", self.path, "Enregistreurs(*.*)")

            if fichiers != None:
                
#                self.nbr_enregistreur = len(fichiers)

                for fichier in reversed(fichiers):            
                    self.tableWidget_config_2.insertRow(0)
                    self.tableWidget_config_2.setItem(0, 0, QtGui.QTableWidgetItem(str(fichier)))
                    
                    self.traitement_fichier_enregistreur(fichier)
                    
                
                    
                self.affichage_tableau_value(0, self.value_enregistreur)
#                self.type_enregistreur = self.comboBox_enregistreur.currentText()
            
        else :
            QMessageBox.critical(self, 
                                                self.trUtf8("Attention"),
                                                self.trUtf8("Vous n'avez pas selectionnÃ© le type d'enregistreur(s)"))




    def traitement_fichier_enregistreur(self, chemin):

        self.item = self.comboBox_enregistreur.currentText()
        
        if self.item == "fichier_datalog":

            fichier_enregistreur = FichierEnregistreur(chemin, self.db)            
            self.value_enregistreur.append(fichier_enregistreur.fichier_datalog())            
            
        if self.item == "fichier_logtag" or self.item == "fichier_waranet_puce":            
            
            fichier_enregistreur = FichierEnregistreur(chemin,self.db)
            
            self.value_enregistreur.append( fichier_enregistreur.fichier_logtag())
            
        if self.item == "fichier_ebro":
            
            fichier_enregistreur = FichierEnregistreur(chemin, self.db)
            self.value_enregistreur = fichier_enregistreur.fichier_ebro()

                
        if self.item == "fichier_progesplus":
            fichier_enregistreur = FichierEnregistreur(chemin, self.db)
            self.value_enregistreur.append(fichier_enregistreur.fichier_progesplus())
#                print(value)
                
        if self.item == "fichier_fd5" :
            fichier_enregistreur = FichierEnregistreur(chemin, self.db)
            self.value_enregistreur.append(fichier_enregistreur.fichier_fd5())


        if self.item == "fichier_sa32": 
            fichier_enregistreur = FichierEnregistreur(chemin, self.db)            
            self.value_enregistreur.append(fichier_enregistreur.fichier_sa32()) 


        if self.item == "fichier_pc10": 
            fichier_enregistreur = FichierEnregistreur(chemin, self.db)            
            self.value_enregistreur.append(fichier_enregistreur.fichier_pc10())
            
        if self.item == "fichier_tag_ela": 
            fichier_enregistreur = FichierEnregistreur(chemin, self.db)            
            self.value_enregistreur.append(fichier_enregistreur.fichier_tag_ela())
     
    def affichage_tableau_value(self, pt_etal, valeur_enregistreur):
        
        self.list_ident_enregistreur = []
        
        #gestion donnees de l'etalon
        self.progressBar.setValue(0)
        
        nbr_colonne =self.tableWidget.columnCount()
        nbr_ligne = self.tableWidget.rowCount()
        
        for ligne in range(nbr_ligne+1):
            self.tableWidget.removeRow(0)        
        for i in range(nbr_colonne+1):            
            self.tableWidget.removeColumn(0)
        
        valeurs = self.fichiers_etalons[pt_etal]
        self.nb_mesure_etalon = len(valeurs[1])
 
        donnees = []
        for ele in valeurs[2]:
            donnees.append(float(ele.replace(",", ".")))

        dates_float = []
           
        for ele in valeurs[1]:
            dates_float.append((ele.hour * 3600+ele.minute * 60 + ele.second))     
        
        
        self.tableWidget.insertColumn(0)
        self.tableWidget.insertColumn(0)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item.setText("Horodatage")
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item.setText(valeurs["etalon"])

        
        i=0
        for ele in donnees:
            self.tableWidget.insertRow(i)
            self.tableWidget.setItem(i, 0, QtGui.QTableWidgetItem(str(valeurs[1][i])))
            self.tableWidget.setItem(i, 1, QtGui.QTableWidgetItem(str(donnees[i])))
            i+=1
        
        

        
        if self.item == "fichier_datalog":
           
            for valeur_enregistreur in valeur_enregistreur:               
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                nbr_mesure_etalon = self.tableWidget.rowCount()            

                if '"Date"  ' in valeur_enregistreur.keys():
                    nbr_mesure_sonde = len(valeur_enregistreur['"Date"  '])
                    date_list = valeur_enregistreur['"Date"  ']
                elif "Date" in valeur_enregistreur.keys():
                    nbr_mesure_sonde = len(valeur_enregistreur["Date"])
                    date_list = valeur_enregistreur["Date"]
                elif '"Date"' in valeur_enregistreur.keys():
                    nbr_mesure_sonde = len(valeur_enregistreur['"Date"'])
                    date_list = valeur_enregistreur['"Date"']
                    
                    
                if '"Heure" ' in valeur_enregistreur.keys():                    
                    heure_list = valeur_enregistreur['"Heure" ']
                elif "Heure" in valeur_enregistreur.keys():                    
                    heure_list = valeur_enregistreur["Heure"]
                elif '"Heure"' in valeur_enregistreur.keys():                    
                    heure_list = valeur_enregistreur['"Heure"']
                    
                #verification nbr de ligne 
                if nbr_mesure_etalon < nbr_mesure_sonde:
                    for j in range(nbr_mesure_sonde - nbr_mesure_etalon):
                        self.tableWidget.insertRow(nbr_mesure_etalon + j)
                
                nbr_colonne = self.tableWidget.columnCount()
                
                self.tableWidget.insertColumn(nbr_colonne)
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(2, item)
                item.setText("Date_Heure")
#                print(heure_list)
                for index, date in enumerate(date_list):
                    try:
#                    print(len(heure_list[index]))
                        if len(heure_list[index]) == 8:
                            horodatage = datetime.strptime(date + " " + heure_list[index], "%d/%m/%y %H:%M:%S") 
                        elif len(heure_list[index]) == 5:
                            horodatage = datetime.strptime(date + " " + heure_list[index]+":"+"00", "%d/%m/%y %H:%M:%S")
                        self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))
                    except ValueError:
                        if len(heure_list[index]) == 8:
                            horodatage = datetime.strptime(date + " " + heure_list[index], "%d/%m/%Y %H:%M:%S") 
                        elif len(heure_list[index]) == 5:
                            horodatage = datetime.strptime(date + " " + heure_list[index]+":"+"00", "%d/%m/%Y %H:%M:%S")
                        self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))
                        
#                print(valeur_enregistreur)
                clef_dico = []
                for ele in valeur_enregistreur.keys():
                    if ele[0]!= "\n":
                        if ele[1] != "H" and ele[1] != "D" and "Inter" not in ele and "Cycle" not in ele:
                            clef_dico.append(ele)

                try:
                    clef_dico.remove("Date")
                    clef_dico.remove("Heure")
                except:
                    pass
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                
                self.nbr_enregistreur = len(clef_dico)
                
                for i in range(len(clef_dico)):
                    self.tableWidget.insertColumn(nbr_colonne_tableau+i)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau+i, item)
                    item.setText(clef_dico[i])
                    
                    self.list_ident_enregistreur.append(clef_dico[i])
    
                    nbr_mesure_etalon = self.tableWidget.rowCount()
                    nbr_mesure_sonde = len(valeur_enregistreur[clef_dico[i]])
    
                    k=0
                    for ele in valeur_enregistreur[clef_dico[i]]:
                        self.tableWidget.setItem(k, (3+i), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
                    
            #copie colonne Date_heure entre chque sonde afin d'avoir la meme facon de synchro:
            nbr_colonne = self.tableWidget.columnCount() - 2
            nbr_ligne = self.tableWidget.rowCount()
            
            for i in range(4, (nbr_colonne*2), 2):
                
                self.tableWidget.insertColumn(i)
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(i, item)
                item.setText("Date_Heure")
                
                for j in range(nbr_ligne):
                    if self.tableWidget.item(j,2 ) != None:
                        self.tableWidget.setItem(j,i,  QtGui.QTableWidgetItem(self.tableWidget.item(j,2 ).text()))
            
        if self.item == "fichier_logtag" or self.item == "fichier_waranet_puce":            
#            print(f"{valeur_enregistreur}")
            
            for valeur_enregistreur in valeur_enregistreur:
#                print(valeur_enregistreur)
                if valeur_enregistreur != None:
                    self.nbr_enregistreur +=1
                    
                    clef_dico = []
                    for ele in valeur_enregistreur.keys():
                        clef_dico.append(ele)
                        
                    nbr_colonne_tableau = self.tableWidget.columnCount()
                    n_enregistreur = [x for x in clef_dico if x != "Date_Heure" and x != "identification_instrum"]
        
                    self.tableWidget.insertColumn(nbr_colonne_tableau)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau, item)
                    item.setText("Date_Heure")
        
                    nbr_mesure_etalon = self.tableWidget.rowCount()
                    nbr_mesure_sonde = len(valeur_enregistreur[n_enregistreur[0]])
                   
                   #verification nbr de ligne 
                    if nbr_mesure_etalon < nbr_mesure_sonde:
                        for j in range(nbr_mesure_sonde - nbr_mesure_etalon):
                            self.tableWidget.insertRow(nbr_mesure_etalon + j)
                    k=0
                    for ele in valeur_enregistreur["Date_Heure"]:
                        self.tableWidget.setItem(k, (nbr_colonne_tableau ), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
                    self.tableWidget.insertColumn(nbr_colonne_tableau + 1)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau + 1, item)
                    item.setText(valeur_enregistreur["identification_instrum"])
                    
                    self.list_ident_enregistreur.append(valeur_enregistreur["identification_instrum"])
                    
                    k=0
                    for ele in valeur_enregistreur[n_enregistreur[0]]:
                        self.tableWidget.setItem(k, (nbr_colonne_tableau +1 ), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
            
        if self.item == "fichier_ebro":
          
            self.nbr_enregistreur = len (self.value_enregistreur)
            
                
            for i in range(self.nbr_enregistreur):
                self.list_ident_enregistreur.append(self.value_enregistreur[i]["identification_instrum"])
                
                nbr_colonne_tableau = self.tableWidget.columnCount()
                self.tableWidget.insertColumn(nbr_colonne_tableau)
                self.tableWidget.insertColumn(nbr_colonne_tableau)
                
                nbr_colonne_bis = self.tableWidget.columnCount()
                
                for n_ligne in range(len(self.value_enregistreur[i]["date_heure"])):
                    nbr_ligne_tableau = self.tableWidget.rowCount()

                    if n_ligne < nbr_ligne_tableau:
                        self.tableWidget.setItem(n_ligne , (nbr_colonne_bis-2), QtGui.QTableWidgetItem(str(self.value_enregistreur[i]["date_heure"][n_ligne])))
                        self.tableWidget.setItem(n_ligne , (nbr_colonne_bis-1), QtGui.QTableWidgetItem(str(self.value_enregistreur[i]["mesures"][n_ligne])))
                        
                    else:
                        self.tableWidget.insertRow(nbr_ligne_tableau )
                        self.tableWidget.setItem(n_ligne , (nbr_colonne_bis-2), QtGui.QTableWidgetItem(str(self.value_enregistreur[i]["date_heure"][n_ligne])))
                        self.tableWidget.setItem(n_ligne , (nbr_colonne_bis-1), QtGui.QTableWidgetItem(str(self.value_enregistreur[i]["mesures"][n_ligne])))
                        
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_bis-2, item)
                    item.setText("Date_Heure")
                    
                    item_2 = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_bis-1, item_2)
                    item_2.setText(self.value_enregistreur[i]["identification_instrum"])
                    
                    
                
        if self.item == "fichier_progesplus":            
            
            for value in self.value_enregistreur:
                
                if value['identification_instrum'] !=None:
                    
                    self.nbr_enregistreur += 1
                    
                    n_enregistreur = value['identification_instrum']
    
                    nbr_ligne_tableau = self.tableWidget.rowCount()
                    nbr_ligne_tableau_total = len(value['Date_Heure'])
                    
                    if nbr_ligne_tableau < nbr_ligne_tableau_total:
                        for i in range(nbr_ligne_tableau_total - nbr_ligne_tableau +1):
                            self.tableWidget.insertRow((nbr_ligne_tableau)) 
    #                
                    nbr_colonne_tableau = self.tableWidget.columnCount()
                    self.tableWidget.insertColumn(nbr_colonne_tableau)
                    self.tableWidget.insertColumn(nbr_colonne_tableau+1)
                     
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau, item)
                    item.setText("Date_Heure") 
                   
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau+1, item)
                    item.setText(value["identification_instrum"])
                   
                    self.list_ident_enregistreur.append(value["identification_instrum"])
    
                    for i in range(len(value['Date_Heure'])):
    
                        self.tableWidget.setItem(i, nbr_colonne_tableau, QtGui.QTableWidgetItem(str(value['Date_Heure'][i])))
                        self.tableWidget.setItem(i, nbr_colonne_tableau + 1, QtGui.QTableWidgetItem(str(value[n_enregistreur][i])))          
              
            
        
        if self.item == "fichier_fd5":
#            print(valeur_enregistreur)
#            
            for valeur_enregistreur in valeur_enregistreur:         
               
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                nbr_mesure_etalon = self.tableWidget.rowCount()            
                
                nbr_mesure_sonde = len(valeur_enregistreur["Heure"])
                
                #verification nbr de ligne 
                if nbr_mesure_etalon < nbr_mesure_sonde:
                    for j in range(nbr_mesure_sonde - nbr_mesure_etalon):
                        self.tableWidget.insertRow(nbr_mesure_etalon + j)
                
                nbr_colonne = self.tableWidget.columnCount()                
                self.tableWidget.insertColumn(nbr_colonne)
                
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(2, item)
                item.setText("Date_Heure")
                
                try:
                    for index, date in enumerate(valeur_enregistreur["Date"]):
                        valeur_date = date + " "+valeur_enregistreur["Heure"][index]
                        horodatage = datetime.strptime(valeur_date, "%d/%m/%Y %H:%M:%S")                    
                        self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))           
                
                
                except KeyError:
                    for index, heure in enumerate(valeur_enregistreur["Heure"]):
                        date = self.tableWidget.item(0,0 ).text()[:10]
                        valeur_date = date + " "+valeur_enregistreur["Heure"][index]
                        horodatage = datetime.strptime(valeur_date, "%Y-%m-%d %H:%M:%S")                    
                        self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))
            
            
                clef_dico = []
                for ele in valeur_enregistreur.keys():
#                    print(ele)
                    if ele!= "Heure" and ele != "Date" and ele!= "NÂ°":
#                        if ele[1] != "H" and ele[1] != "D" and "Inter" not in ele and "Cycle" not in ele:
                        clef_dico.append(ele)
                        
                        
                    
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                
                self.nbr_enregistreur = len(clef_dico)
                
                for i in range(len(clef_dico)):
                    self.tableWidget.insertColumn(nbr_colonne_tableau+i)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau+i, item)
                    item.setText(clef_dico[i])
                    
                    self.list_ident_enregistreur.append(clef_dico[i])
    
                    nbr_mesure_etalon = self.tableWidget.rowCount()
                    nbr_mesure_sonde = len(valeur_enregistreur[clef_dico[i]])
    
                    k=0
                    for ele in valeur_enregistreur[clef_dico[i]]:
                        self.tableWidget.setItem(k, (3+i), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
                    
            #copie colonne Date_heure entre chque sonde afin d'avoir la meme facon de synchro:
            nbr_colonne = self.tableWidget.columnCount() - 2
            nbr_ligne = self.tableWidget.rowCount()
            
            for i in range(4, (nbr_colonne*2), 2):
                
                self.tableWidget.insertColumn(i)
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(i, item)
                item.setText("Date_Heure")
                
                for j in range(nbr_ligne):
                    if self.tableWidget.item(j,2 ) != None:
                        self.tableWidget.setItem(j,i,  QtGui.QTableWidgetItem(self.tableWidget.item(j,2 ).text()))
            
            
            
            
        if self.item == "fichier_sa32":
            
            for valeur_enregistreur in valeur_enregistreur:         
               
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                nbr_mesure_etalon = self.tableWidget.rowCount()            
                
                nbr_mesure_sonde = len(valeur_enregistreur["Heure"])
                
                #verification nbr de ligne 
                if nbr_mesure_etalon < nbr_mesure_sonde:
                    for j in range(nbr_mesure_sonde - nbr_mesure_etalon):
                        self.tableWidget.insertRow(nbr_mesure_etalon + j)
                
                nbr_colonne = self.tableWidget.columnCount()                
                self.tableWidget.insertColumn(nbr_colonne)
                
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(2, item)
                item.setText("Date_Heure")
                

                for index, date in enumerate(valeur_enregistreur["Date"]):
                    valeur_date = date + " "+valeur_enregistreur["Heure"][index]
                    horodatage = datetime.strptime(valeur_date, "%d/%m/%y %H:%M:%S")                    
                    self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))
                    
                clef_dico = []
                for ele in valeur_enregistreur.keys():
                                        
                    if ele not in ["Heure","Date", "Cycle", "Inter.", "Inter"]:
                        clef_dico.append(ele)
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                
                self.nbr_enregistreur = len(clef_dico)
                
                for i in range(len(clef_dico)):
                    self.tableWidget.insertColumn(nbr_colonne_tableau+i)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau+i, item)
                    item.setText(clef_dico[i])
                    
                    self.list_ident_enregistreur.append(clef_dico[i])
    
                    nbr_mesure_etalon = self.tableWidget.rowCount()
                    nbr_mesure_sonde = len(valeur_enregistreur[clef_dico[i]])
    
                    k=0
                    for ele in valeur_enregistreur[clef_dico[i]]:
                        self.tableWidget.setItem(k, (3+i), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
                    
            #copie colonne Date_heure entre chque sonde afin d'avoir la meme facon de synchro:
            nbr_colonne = self.tableWidget.columnCount() - 2
            nbr_ligne = self.tableWidget.rowCount()
            
            for i in range(4, (nbr_colonne*2), 2):
                
                self.tableWidget.insertColumn(i)
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(i, item)
                item.setText("Date_Heure")
                
                for j in range(nbr_ligne):
                    if self.tableWidget.item(j,2 ) != None:
                        self.tableWidget.setItem(j,i,  QtGui.QTableWidgetItem(self.tableWidget.item(j,2 ).text()))
                  
                  
        if self.item == "fichier_pc10":
#            print(valeur_enregistreur)
            for valeur_enregistreur in valeur_enregistreur:         
               
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                nbr_mesure_etalon = self.tableWidget.rowCount()            
                
                nbr_mesure_sonde = len(valeur_enregistreur["Heure"])
                
                #verification nbr de ligne 
                if nbr_mesure_etalon < nbr_mesure_sonde:
                    for j in range(nbr_mesure_sonde - nbr_mesure_etalon):
                        self.tableWidget.insertRow(nbr_mesure_etalon + j)
                
                nbr_colonne = self.tableWidget.columnCount()                
                self.tableWidget.insertColumn(nbr_colonne)
                
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(2, item)
                item.setText("Date_Heure")
                

                for index, date in enumerate(valeur_enregistreur["Date"]):
                    valeur_date = date + " "+valeur_enregistreur["Heure"][index]
                    horodatage = datetime.strptime(valeur_date, "%d/%m/%Y %H:%M:%S")                    
                    self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))
                    
                clef_dico = []
                for ele in valeur_enregistreur.keys():
                                        
                    if ele not in ["Heure","Date", "Cycle", "Inter.", "Inter"]:
                        clef_dico.append(ele)
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                
                self.nbr_enregistreur = len(clef_dico)
                
                for i in range(len(clef_dico)):
                    self.tableWidget.insertColumn(nbr_colonne_tableau+i)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau+i, item)
                    item.setText(clef_dico[i])
                    
                    self.list_ident_enregistreur.append(clef_dico[i])
    
                    nbr_mesure_etalon = self.tableWidget.rowCount()
                    nbr_mesure_sonde = len(valeur_enregistreur[clef_dico[i]])
    
                    k=0
                    for ele in valeur_enregistreur[clef_dico[i]]:
                        self.tableWidget.setItem(k, (3+i), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
                    
            #copie colonne Date_heure entre chque sonde afin d'avoir la meme facon de synchro:
            nbr_colonne = self.tableWidget.columnCount() - 2
            nbr_ligne = self.tableWidget.rowCount()
            
            for i in range(4, (nbr_colonne*2), 2):
                
                self.tableWidget.insertColumn(i)
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(i, item)
                item.setText("Date_Heure")
                
                for j in range(nbr_ligne):
                    if self.tableWidget.item(j,2 ) != None:
                        self.tableWidget.setItem(j,i,  QtGui.QTableWidgetItem(self.tableWidget.item(j,2 ).text()))
      
        if self.item == "fichier_tag_ela":
#            print(valeur_enregistreur)
            for valeur_enregistreur in valeur_enregistreur:              
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                nbr_mesure_etalon = self.tableWidget.rowCount()            
                
                nbr_mesure_sonde = len(valeur_enregistreur["Heure"])
                
                #verification nbr de ligne 
                if nbr_mesure_etalon < nbr_mesure_sonde:
                    for j in range(nbr_mesure_sonde - nbr_mesure_etalon):
                        self.tableWidget.insertRow(nbr_mesure_etalon + j)
                
                nbr_colonne = self.tableWidget.columnCount()                
                self.tableWidget.insertColumn(nbr_colonne)
                
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(2, item)
                item.setText("Date_Heure")
                

                for index, date in enumerate(valeur_enregistreur["Date"]):
                    valeur_date = date + " "+valeur_enregistreur["Heure"][index]
                    horodatage = datetime.strptime(valeur_date, "%Y/%m/%d %H:%M:%S")                    
                    self.tableWidget.setItem(index, 2, QtGui.QTableWidgetItem(str(horodatage)))
                    
                clef_dico = []
                for ele in valeur_enregistreur.keys():
                                        
                    if ele not in ["Heure","Date"]:
                        clef_dico.append(ele)
                    
                nbr_colonne_tableau = self.tableWidget.columnCount()
                
                self.nbr_enregistreur = len(clef_dico)
                
                for i in range(len(clef_dico)):
                    self.tableWidget.insertColumn(nbr_colonne_tableau+i)
                    item = QtGui.QTableWidgetItem()
                    self.tableWidget.setHorizontalHeaderItem(nbr_colonne_tableau+i, item)
                    item.setText(clef_dico[i])
                    
                    self.list_ident_enregistreur.append(clef_dico[i])
    
                    nbr_mesure_etalon = self.tableWidget.rowCount()
                    nbr_mesure_sonde = len(valeur_enregistreur[clef_dico[i]])
    
                    k=0
                    for ele in valeur_enregistreur[clef_dico[i]]:
                        self.tableWidget.setItem(k, (3+i), QtGui.QTableWidgetItem(str(ele)))
                        k+=1
                    
            #copie colonne Date_heure entre chque sonde afin d'avoir la meme facon de synchro:
            nbr_colonne = self.tableWidget.columnCount() - 2
            nbr_ligne = self.tableWidget.rowCount()
            
            for i in range(4, (nbr_colonne*2), 2):
                
                self.tableWidget.insertColumn(i)
                item = QtGui.QTableWidgetItem()
                self.tableWidget.setHorizontalHeaderItem(i, item)
                item.setText("Date_Heure")
                
                for j in range(nbr_ligne):
                    if self.tableWidget.item(j,2 ) != None:
                        self.tableWidget.setItem(j,i,  QtGui.QTableWidgetItem(self.tableWidget.item(j,2 ).text()))
            
            
            
            
            
    @pyqtSlot()
    def on_pushButton_pt_precedent_clicked(self):
        """
        Slot documentation goes here.
        """
        pt_etal = self.spinBox_pt_etal.value() -1
        self.affichage_tableau_value(pt_etal, self.value_enregistreur)
        
        nom_fichier_mesure = self.spinBox_pt_etal.value()
        n_ligne_tableau_config = nom_fichier_mesure - 1
        etalon_fichier = self.tableWidget_config.item(n_ligne_tableau_config, 3).text()
        generateur_fichier = self.tableWidget_config.item(n_ligne_tableau_config, 2).text()
        
        self.lineEdit_etalon.setText(etalon_fichier)
        self.lineEdit_generateur.setText(generateur_fichier)
        
        self.comboBox_generateur.setCurrentIndex((self.comboBox_generateur.count() - 1))

        self.comboBox_etalon.setCurrentIndex((self.comboBox_etalon.count() - 1))
    
    @pyqtSlot()
    def on_pushButton_pt_suivant_clicked(self):
        """
        Slot documentation goes here.
        """
        pt_etal = self.spinBox_pt_etal.value() - 1
        self.affichage_tableau_value(pt_etal, self.value_enregistreur)
        
        nom_fichier_mesure = self.spinBox_pt_etal.value()
        n_ligne_tableau_config = nom_fichier_mesure - 1
        etalon_fichier = self.tableWidget_config.item(n_ligne_tableau_config, 3).text()
        generateur_fichier = self.tableWidget_config.item(n_ligne_tableau_config, 2).text()
        
        self.lineEdit_etalon.setText(etalon_fichier)
        self.lineEdit_generateur.setText(generateur_fichier)
        
        self.comboBox_generateur.setCurrentIndex((self.comboBox_generateur.count() - 1))

        self.comboBox_etalon.setCurrentIndex((self.comboBox_etalon.count() - 1))
        
    @pyqtSlot()
    def on_actionExport_fichier_LaboTemp_triggered(self):
        """
        Slot documentation goes here.
        """
        if self.comboBox_etalon.currentText() != "*" and self.comboBox_etalon.currentText() != "*":
            
    
            path="C:/Labo_Temp/AppData/"
            
    
            #gestion fichier mesure (onglet saisie)
            dict = {}
            nom_fichier_mesure = self.spinBox_pt_etal.value()
            n_ligne_tableau_config = nom_fichier_mesure - 1
            
            chemin_fichier_etalon = self.tableWidget_config.item(n_ligne_tableau_config,0 ).text()
            temp_consigne = self.tableWidget_config.item(n_ligne_tableau_config,1 ).text()
    
            etalon = self.comboBox_etalon.currentText()
#            print(etalon)
    
            
    #        Recuperation mesures:
    #            Etalon:
            #lecture tableau
            nbr_ligne = self.tableWidget.rowCount()
            nbr_colonne = self.tableWidget.columnCount()
            
            valeur_etalon = []
            
    
            for ligne in range(nbr_ligne):
                valeur_etalon.append(self.tableWidget.item(ligne,1).text())
            
            if self.comboBox_enregistreur.currentText()not in ["*", "fichier_datalog", "fichier_sa32","fichier_pc10", "fichier_fd5" ]:
                i=1
                

                for colonne in range(3, nbr_colonne, 2):
                    num_instrum = "mesures_inst_" + str(i)

                    donnee_instrum = []
                    for ligne in range(nbr_ligne):
                        donnee_instrum.append(self.tableWidget.item(ligne,colonne).text())
                    dict[num_instrum] = donnee_instrum
                    i+=1
                    
                    
            else:
                i=1
                for colonne in range(3, nbr_colonne, 2):
                    
                    if self.tableWidget.horizontalHeaderItem(colonne).text() in self.dictionnaire_ident_sondes_centrales.keys():
                        num_instrum = "mesures_inst_" + str(i)
                        donnee_instrum = []
                        for ligne in range(nbr_ligne):
                            donnee_instrum.append(self.tableWidget.item(ligne,colonne).text())
                        dict[num_instrum] = donnee_instrum
                        
                    
                        i+=1
                
                    
            dict["mesures_etal_brute"] = valeur_etalon
            dict["mesures_etal_corri"] = []
            dict["operateur"] = self.comboBox_operateur.currentIndex() - 1
            dict["generateur"] = self.comboBox_generateur.currentIndex()
            
#            nom_etalon = " ".join(str(x) for x in etalon.split("_")) 
            dict["etalon"] = self.comboBox_etalon.currentIndex()
            dict["id_poly"] = self.db.id_poly(etalon)
            dict["chemin_fichier_etalon"] = chemin_fichier_etalon
#            dict["id_poly"] = self.db.id_poly(nom_etalon)
            dict["temp_consig"] = temp_consigne
            
#                print(dict)
            nom_fichier_final = path+str(nom_fichier_mesure)
            with open(nom_fichier_final, 'wb') as fichier :
                mon_pickler = pickle.Pickler(fichier)
                mon_pickler.dump(dict)
                

        else:
            QMessageBox.critical(self, self.trUtf8("Attention"),
                                    self.trUtf8("Vous n'avez pas selectionnÃ© l'Ã©talon et/ou le gÃ©nÃ©rateur"))
                                                
                                                

    
    @pyqtSlot(int)
    def on_tabWidget_currentChanged(self, index):
        """
        Slot documentation goes here.
        """
        
        if self.comboBox_operateur.currentText() == "*" and self.tabWidget.currentIndex() != 0:        
        
            QMessageBox.critical(self, 
                                                self.trUtf8("Attention"),
                                                self.trUtf8("Vous n'avez pas selectionnÃ© le responsable des mesures"))
            
            self.tabWidget.setCurrentIndex(0)
        else:
            nom_fichier_mesure = self.spinBox_pt_etal.value()
            n_ligne_tableau_config = nom_fichier_mesure - 1
            etalon_fichier = self.tableWidget_config.item(n_ligne_tableau_config, 3).text()
            generateur_fichier = self.tableWidget_config.item(n_ligne_tableau_config, 2).text()
            
            self.lineEdit_etalon.setText(etalon_fichier)
            self.lineEdit_generateur.setText(generateur_fichier)    
    

    
    @pyqtSlot()
    def on_actionExport_fichier_config_LaboTemp_triggered(self):
        """
        Slot documentation goes here.
        """
#        print(self.list_ident_enregistreur )
#        if self.comboBox_etalon.currentText() != "*" and self.comboBox_etalon.currentText() != "*":
            
        if self.comboBox_enregistreur.currentText()not in ["*", "fichier_datalog", "fichier_sa32","fichier_pc10", "fichier_fd5", "fichier_tag_ela" ]:            
            path="C:/Labo_Temp/AppData/"
            nom_fichier = "configuration"
            
            self.fichier_config_labotemp(path, nom_fichier)
            
        else:
            nbr_colonne = self.tableWidget.columnCount()
            list_nom_colonne = []
            for n_colonne in range(3, nbr_colonne, 2):
#            colonne  =  self.tableWidget.horizontalHeaderItem(n_colonne).text()         
               list_nom_colonne.append(self.tableWidget.horizontalHeaderItem(n_colonne).text())
            
            self.gestion_centrales = Dialog(list_nom_colonne, self.parc)
            
            self.connect(self.gestion_centrales, SIGNAL("fermetureGestionCentrales(PyQt_PyObject)"),self.selection_ident_sondes_centrale)
            
            self.gestion_centrales.show()
                
           
    
    def selection_ident_sondes_centrale(self, dic_sondes):            
        
#        print("dict sondes {}".format(dic_sondes))
        for clef, sonde in dic_sondes.items():
            if sonde !="*":
                self.dictionnaire_ident_sondes_centrales [clef] = sonde
        
#        print(self.dictionnaire_ident_sondes_centrales )
        
        self.nbr_enregistreur = len(self.dictionnaire_ident_sondes_centrales)
            
        self.list_ident_enregistreur = []
        
        nbr_colonne = self.tableWidget.columnCount()
#        list_nom_colonne = []
        for n_colonne in range(nbr_colonne):
            colonne  =  self.tableWidget.horizontalHeaderItem(n_colonne).text()         
#            list_nom_colonne.append(self.tableWidget.horizontalHeaderItem(colonne).text())
            if colonne in self.dictionnaire_ident_sondes_centrales.keys():
                self.list_ident_enregistreur.append(self.dictionnaire_ident_sondes_centrales[colonne])
        
#        self.list_ident_enregistreur =[sonde for clef , sonde in self.dictionnaire_ident_sondes_centrales.items() if clef in  list_nom_colonne]
#        
#        print("listcououoc {}".format(self.list_ident_enregistreur))
        
        path="C:/Labo_Temp/AppData/"
        nom_fichier = "configuration"
            
        self.fichier_config_labotemp(path, nom_fichier)
            
    def fichier_config_labotemp(self, path, nom_fichier):
        
                #gestion fichier configuration :
        
        path_nom_fichier = path+nom_fichier
        
        donnees = []
        dict ={}
        dict["nbr_pts_temp"] = int(self.lineEdit_nbr_pt.text())
        
#        print(f"nbr d'instrum {self.nbr_enregistreur}")
        dict["nbr_instrum"] = self.nbr_enregistreur
        dict["Date"] = self.date_etalonnage
        
        donnees.append(dict)
        
#        print( "self.iden enregist {}".format(self.list_ident_enregistreur))
        
        for ident in self.list_ident_enregistreur:
#            print(ident)
            dict_instrument = {}
            caract_instrum = self.db.return_caract_instrum(ident)
            dict_instrument["nom_instrum"] = ident
            dict_instrument["constructeur"] = caract_instrum[0]
            dict_instrument["n_serie"] = caract_instrum[1]            
            dict_instrument["Type"] = caract_instrum[2]
            dict_instrument["resolution"] = [float(caract_instrum[3])]
#            print(" resolution {}".format([float(caract_instrum[3])]))
            dict_instrument["renseignement_complementaire"] = caract_instrum[4]
            
            dict_instrument["immersion"] = []
            dict_instrument["Type_etalonnage"] = "Cofrac"
            dict_instrument["Etat_reception"] = "RAS"
            
            donnees.append(dict_instrument)
            
#        print(donnees)
        with open(path_nom_fichier, 'wb') as fichier :
            mon_pickler = pickle.Pickler(fichier)
            mon_pickler.dump(donnees)
